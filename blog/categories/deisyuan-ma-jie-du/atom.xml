<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：deis源码解读 | Welcome to monkey-H's blog]]></title>
  <link href="http://monkey-h.github.io/blog/categories/deisyuan-ma-jie-du/atom.xml" rel="self"/>
  <link href="http://monkey-h.github.io/"/>
  <updated>2015-12-03T10:48:44+08:00</updated>
  <id>http://monkey-h.github.io/</id>
  <author>
    <name><![CDATA[monkey-H]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deis源码解读-deis基本流程]]></title>
    <link href="http://monkey-h.github.io/blog/deis-5/"/>
    <updated>2015-09-21T09:24:43+08:00</updated>
    <id>http://monkey-h.github.io/blog/deis-5</id>
    <content type="html"><![CDATA[<h3>写在前面</h3>

<p>走了很多弯路之后，我突然想到，我们应该按照部署一个应用的基本流程来走，这样才能比较清晰的看懂。我们这里主要通过两个流程来看，第一个是deisctl的部署过程，因为在部署过程中，他设置了很多环境变量，启动了很多容器，在后面部署应用的时候经常用到，所以我们这里就要看一看。第二个就是部署应用的过程。这个也是理解deis在里面对所有应用，包括流程控制，资源划分，编排调度的重要途径。</p>

<!--more-->


<h3>deisctl install</h3>

<p>在安装deis集群的时候，很重要的一个安装步骤，就是deisctl install platform，那么，我们在deis的源码中，在路径/deis/deisctl/deisctl.go中，找到了这么一段。Command函数</p>

<pre><code>中间好多天没有更新，其实deis的代码已经读的差不多了，但是因为一直在往前走，所以没有时间来记录这些东西了，以后有时间再来更新。
在这里给大家提一个醒，deis的controller部分，是通过一个django的框架提供给大家的，所以，去看卡django是怎么来响应服务的，就不会很疑惑deis的代码在干什么了。大家加油
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deis源码解读-deis基本知识]]></title>
    <link href="http://monkey-h.github.io/blog/deis-4/"/>
    <updated>2015-09-18T14:58:04+08:00</updated>
    <id>http://monkey-h.github.io/blog/deis-4</id>
    <content type="html"><![CDATA[<h3>写在前面</h3>

<p>读的过程中，有一些非常常见的，go引用的其余的网络在线包，我们这里来介绍一下。</p>

<!--more-->


<h4>边读边学</h4>

<p>多代码的时候要有耐心，不要想着一口吃个大胖子，一点一点来，不懂的地方就查，不要想着跳过。特别注意import方法里面引入的包，这个很重要。
import os 像这些没有加网址的，都是go语言自带的一些标准库。os提供了一套和平台无关的接口，用来操作系统功能。和操作系统进行交互。
import github.com/masterminds/cookoo go语言代码，一般都引入了大量的网上代码库，这就是其中一个。</p>

<h4>cookoo</h4>

<p>既然他引入了cookoo，我们就看看这个cookoo是个什么吊东西。
直接进入那个github的网址。
cookoo是一个开发框架。开发者经常把他当做一个中间件平台，这个平台可以给开发者足够的灵活性来开发应用，同时，handles the top-level structure for you.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>main.go&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;package main&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;import (
</span><span class='line'>    &ldquo;github.com/Masterminds/cookoo&rdquo;
</span><span class='line'>    &ldquo;github.com/Masterminds/cookoo/cli&rdquo;
</span><span class='line'>)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func main() {
</span><span class='line'>    cli.New(cookoo.Cookoo()).Run(&ldquo;help&rdquo;)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，这里用cli.New()创建了一个新的cookoo app，这句话反悔了三个东西，registry（用来声明routes），router（用来执行route），context（用来给app传送数据等）</p>

<p>运行是通过go run main.go -h这样来运行，或者go run main.go这样。这里的-h是-help的意思，这个route是cookoo默认就有的，不需要我们自己再去定义。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func main() {
</span><span class='line'>    reg, router, cxt := cookoo.Cookoo()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;reg.Route("hello", "A Hello World route").
</span><span class='line'>    Does(fmt.Printf, "_").
</span><span class='line'>    Using("format").WithDefault("Hello World!\n")
</span><span class='line'>
</span><span class='line'>cli.New(reg, router, cxt).Run("hello")
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}
</span><span class='line'>&lt;code&gt;
</span><span class='line'>这里就不用说了，重新定义了main函数。第一条命令就返回了上面说的那三个东西，第二行就是定义了一条新的route。
</span><span class='line'>一条route有一个名字和一个描述，接着跟着若干条命令。可以认为是一个task（hello），和一系列的步骤需要完成这个task。刚刚也说了在cookoo app中，router是用来跑task的，但是，用户一般不直接和router交互，而是通过runner来交互。
</span><span class='line'>在上面我们定义的route中，Route（）函数有两个参数，一个是route的名字，这个很重要，在后面对route的调用中，就是通过route的名字来调用。第二个参数就是一个对route的描述，这个是对开发者而言的，终端用户一般看不到。cookoo用这个东西来自动生成程序的文档。route最终都是要做事情的，所以，在route的后面，都会跟着若干Does，本例中route Does（fmt.Printf, "_"）同样的，Does也有两个参数，一个是要跑的命令，另一个是输出的名字。这里的"_"的意思就是忽略这条命令的输出，这个不重要。fmt.Printf是cookoo的内嵌命令，直接调用了go的fmt.Printf。命令需要的参数，我们通过Using来输入，Using通过键值对的方式，把数据传输到Does command中的函数中去。
</span><span class='line'>那么，跑这调route的方式就是cli.New(reg, router, cxt).Run("hello")，然后如果我们go run main.go，就会出现Hello World!的输出。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>package main&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;import (
</span><span class='line'>    &ldquo;github.com/Masterminds/cookoo&rdquo;
</span><span class='line'>    &ldquo;github.com/Masterminds/cookoo/cli&rdquo;
</span><span class='line'>    &ldquo;github.com/Masterminds/cookoo/fmt&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;"flag"
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;const (
</span><span class='line'>    Summary = &ldquo;A Hello World program&rdquo;
</span><span class='line'>    Description = &lt;code&gt;This program writes Hello World to standard output.
</span><span class='line'>With the -a flag, the second word can be replaced by an artitary string.
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func main() {
</span><span class='line'>    reg, router, cxt := cookoo.Cookoo()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;flags := flag.NewFlagSet("global", flag.PanicOnError)
</span><span class='line'>flags.Bool("h", false, "Show help text")
</span><span class='line'>flags.String("a", "World", "A string to place after 'Hello'")
</span><span class='line'>
</span><span class='line'>reg.Route("hello", "A Hello World route").
</span><span class='line'>    Does(fmt.Printf, "_").
</span><span class='line'>    Using("format").WithDefault("Hello %s!\n").
</span><span class='line'>    Using("0").From("cxt:a")
</span><span class='line'>
</span><span class='line'>cli.New(reg, router, cxt).Help(Summary, Description, flags).Run("hello")
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p>const用来定义常量，summary一般较短，description一般较长。
flag也是很重要的一个部分。cookoo用的GO语言内置的flag包来支持commandline flag。在上面的例子中，我们声明了两种flag。一个是-h，如果我们想override 默认的flag，这个是必须的。第二个是-a，这个flag允许我们从command line传送一个sring到程序中。
那么运行起来是什么样子的呢？
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go run main.go
</span><span class='line'>Hello World!&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;go run main.go -h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;SUMMARY&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;A Hello World program&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;USAGE&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This program writes Hello World to standard output.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;With the -a flag, the second word can be replaced by an artitary string.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;FLAGS&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;-a: A string to place after 'Hello' (Default: 'World')
</span><span class='line'>-h: Show help text (Default: 'false')
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;go run main.go -a You
</span><span class='line'>Hello You!</span></code></pre></td></tr></table></div></figure>
我们再看route的定义。Does有了两个参数，第一个是format，第二个是0，这个0的意思是把第一个参数传给format string。类似于fmt.Printf(format, cxt.Get(&ldquo;a&rdquo;, &ldquo;&rdquo;).(string))那么，cxt的a是哪里来的呢？是我们最后cli.New(reg, router, cxt).Help(Summary, Description, flags).Run(&ldquo;hello&rdquo;)，这里的flags里面的flags.String()这里定义的。</p>

<p>如果只有一条命令，就没上面意思了，如果多条命令呢？
&#8220;`
reg.Route(&ldquo;hello&rdquo;, &ldquo;A Hello World route&rdquo;).
        Does(fmt.Printf, &ldquo;_&rdquo;).
        Using(&ldquo;format&rdquo;).WithDefault(&ldquo;Hello %s!\n&rdquo;).
        Using(&ldquo;0&rdquo;).From(&ldquo;cxt:a&rdquo;)</p>

<pre><code>reg.Route("goodbye", "A Goodbye World route").
    Does(fmt.Printf, "_").
    Using("format").WithDefault("Goodbye %s!\n").
    Using("0").From("cxt:a")
</code></pre>

<pre><code>看这个，就有了多条命令。
同样的，调用就变成了这样cli.New(reg, router, cxt).Help(Summary, Description, flags).RunSubcommand()
和原来的基本一样，只不过最后的Run（“hello”）变成了RunSubcommand()，就是可以调用多个了。
</code></pre>

<p>go run main.go -a Matt hello
Hello Matt!
go run main.go -a Matt goodbye
Goodbye Matt!
<code>
但是，如果go run main.go goodbye -a Matt
输出就是Goodbye World!这是为什么呢？
这是因为，在command line的不同位置，flag的类型可能是global类型的，或者subcommand 类型的。
go run main.go [GLOBAL_FLAGS] subcommand [LOCAL_FLAGS]
global类型的flag可以在整个app中共享，local flag只能对指定的subcommand用。
</code>
func main() {
    reg, router, cxt := cookoo.Cookoo()</p>

<pre><code>flags := flag.NewFlagSet("global", flag.PanicOnError)
flags.Bool("h", false, "Show help text")
flags.String("a", "World", "A string to place after 'Hello'")

helloFlags := flag.NewFlagSet("hello", flag.PanicOnError)
helloFlags.String("s", "Hello", "Alternate salutation")

reg.Route("hello", "A Hello World route").
    // Not necessary if "subcommand" is true on ParseArgs.
    //Does(cli.ShiftArgs, "cmd").
        //Using("args").WithDefault("runner.Args").
        //Using("n").WithDefault(1).
    Does(cli.ParseArgs, "extras").
        Using("flagset").WithDefault(helloFlags).
        Using("args").From("cxt:runner.Args").
        Using("subcommand").WithDefault(true).
    Does(fmt.Printf, "_").
        Using("format").WithDefault("%s %s!\n").
        Using("0").From("cxt:s").
        Using("1").From("cxt:a")

reg.Route("goodbye", "A Goodbye World route").
    Does(fmt.Printf, "_").
    Using("format").WithDefault("Goodbye %s!\n").
    Using("0").From("cxt:a")

cli.New(reg, router, cxt).Help(Summary, Description, flags).RunSubcommand()
</code></pre>

<p>}
<code>
两个地方注意一下，第一，flag.NewFlagSet的时候，里面的是global，还是subcommand的名字，直接决定了是否是local flag。第二，后面route配置的时候，注意多了一个Does，用来加上subcommand的WithDefault，设置为true。
调用有点意思。
</code>
$ go run main.go hello
Hello World!</p>

<p>$ go run main.go hello -s Hi
Hi World!</p>

<p>$ go run main.go -a You hello
Hello You!</p>

<p>$ go run main.go -a You hello -s Hi
Hi You!
<code>
让我们来看看，做同样的事情的另外一种实现方式。
</code>
reg.Route(&ldquo;hello&rdquo;, &ldquo;A Hello World route&rdquo;).
        Does(cli.ShiftArgs, &ldquo;cmd&rdquo;).
            Using(&ldquo;args&rdquo;).WithDefault(&ldquo;runner.Args&rdquo;).
            Using(&ldquo;n&rdquo;).WithDefault(1).
        Does(cli.ParseArgs, &ldquo;extras&rdquo;).
            Using(&ldquo;flagset&rdquo;).WithDefault(helloFlags).
            Using(&ldquo;args&rdquo;).From(&ldquo;cxt:runner.Args&rdquo;).
        Does(fmt.Printf, &ldquo;_&rdquo;).
            Using(&ldquo;format&rdquo;).WithDefault(&ldquo;%s %s!\n&rdquo;).
            Using(&ldquo;0&rdquo;).From(&ldquo;cxt:s&rdquo;).
            Using(&ldquo;1&rdquo;).From(&ldquo;cxt:a&rdquo;)
<code>``
这里没有了之前的设置subcommand.WithDefault的true。而是通过移动参数的形式。
</code>go run main.go -a matt hello -s hi<code>
这样会给os.Args设置成这样：[]string{ "-a", "matt", "hello", "-s", "hi"}
当程序第一次跑的时候，会把global flags提取出来，把剩余的放入runner.Args。类似于</code>cxt.Put(&ldquo;runner.Args&rdquo;, []string{&ldquo;hello&rdquo;, &ldquo;-s&rdquo;, &ldquo;hi&rdquo;})`，但是，当hello command run的时候，我们希望获得他自己的flag，但是hello却是第一个参数，所以，我们要把这个移动一下，就有了那个cli.ShiftArgs，那段代码的意思就是，把第一个参数放入cmd，剩下的参数放入到cxt:runner.Args，接下来的就和上个实现基本一致了。这个方法即可以用来调试，又可以用来定义更多的参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deis源码解读-deis基本组件]]></title>
    <link href="http://monkey-h.github.io/blog/deis-3/"/>
    <updated>2015-09-18T11:08:53+08:00</updated>
    <id>http://monkey-h.github.io/blog/deis-3</id>
    <content type="html"><![CDATA[<h3>deis基本组件</h3>

<p>这一篇文章开始，开始阅读deis源码。首先，介绍一下deis按照构架的基本组件。</p>

<!--more-->


<h4>controller</h4>

<p>controller组件是一个http 的api server，和我之前写的nap的controller组件类似，是一个控制组件，用来控制整个平台的工作流。但是controller组件包含了nap controller组件没有的功能，也就是nap平台fleet的功能。用来决定容器跑在什么位置上的功能，叫做schedule。deis的command line就是和这个controller组件进行交互的。</p>

<h4>database</h4>

<p>顾名思义，数据库组件，deis用的PostgreSQL数据库，这个组件用来存储deis的一些持久的平台信息，备份和WAL（预写日志 write-ahead logging）日志信息，也存在这个地方。</p>

<h4>builder</h4>

<p>builder组件用git服务器来处理应用build过程。包括通过ssh发送过来的git push请求，验证ssh key fingerprint，验证是否有些权限，从更新过的git repository中，build 一个新的docker image，增加最后的config信息到docker image，push image到registry，通过controller触发一个新的release。</p>

<h4>registry</h4>

<p>用来存储docker images的组件，至于image data信息是存储在store中的。</p>

<h4>logspout</h4>

<p>这是他们做好的一个容器，专门用来收集每个coreos主机上所有的容器的日志信息（第一线程）。所以，集群中所有的coreos主机，都要有logspout这个组件。logspout这个组件会把日志信息发送到logger组件。</p>

<h4>logger</h4>

<p>logger组件是一个syslog 服务器，用来收录logspout从整个集群中发送过来的日志信息。controller会查看这些信息。</p>

<h4>publisher</h4>

<p>这是一个比较小的组件，用来发布container的信息到etcd，这样，router组件才会知道这些信息。</p>

<h4>router</h4>

<p>router组件通过nginx，来路由traffic到应用容器。</p>

<h4>store</h4>

<p>这个组件也是用来存储信息的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[deis源码解读-go语言学习2]]></title>
    <link href="http://monkey-h.github.io/blog/deis-2/"/>
    <updated>2015-09-07T14:32:41+08:00</updated>
    <id>http://monkey-h.github.io/blog/deis-2</id>
    <content type="html"><![CDATA[<h4>写在前面</h4>

<p>又开始看代码了，NAP的编程进入了细节化阶段，不能再闭门造车了，看看deis的代码，看看别人是怎么做的。首先，要学习一下go语言是怎么用的。</p>

<!--more-->


<h4>go语言 复杂类型 方法 接口</h4>

<ul>
<li>go语言中也存在指针类型，其声明方式是p := &amp;i 或者 var p *int这样，注意，go语言中没有指针运算。</li>
<li>结构体就是一个字段的集合。
type Vertex struct {
  X int
  Y int
}
func main() {
  fmt.Println(Vertex{1, 2})
  v := Vertex{1,2}
  v.X = 4
  p := &amp;v
  p.Y = 3
}
打印出来的是{1 2}</li>
<li>结构体初始化的时候，可以通过{X:1, Y:2}这种方式初始化，如果省略了其中一个，比如Y，就是初始化的零值。</li>
<li>数组 var a [2]string a[0]</li>
<li>切片slice。s := []int{2,3,4,5} 可以通过这种方式访问，s[1:3], s[:3] s[2:]注意，s[a:b]是从a开始，到b-1结束。</li>
<li>slice除了以上面的方式构建，还可以通过make函数构建。a := make([]int, 5)，这个5就是slice的len。slice有两个函数要注意，一是len，一是cap。len(x) cap(x)，len是长度，cap是能够装的个数。make([]int ,0,5)第一个就是len，后一个就是cap。slice定义的时候可以不定义大小，通过append来增加输入。当超过cap的时候，会自动增加大小。
var a []int
a = append(a,1)
a = append(a, 2,3,4)</li>
<li>通过for循环的range格式对slice循环。
func main(){
var pow = []int{1,2,3,4,5}
for i,v := range pow{
fmt.Printf(&ldquo;%d: %d \n&rdquo;, i,v)
}
}
这里的i，v就是小标和数字。</li>
<li>如果用不到i，就用<em>来代替。for </em>, value := range pow</li>
<li>map和java的hashmap很像。
type Vertex struct{
Lat,Long float64
}
var m map [string] Vertex
m = make(map[string]Vertex)
m[&ldquo;hello&rdquo;] = Vertext{
1.3,2.9
}
注意，map在使用之前，必须用make来创建。没有make的map是空的，值为nil，并且不能赋值。</li>
<li>另一种初始化方式。
var m = map[string]Vertex{
&ldquo;hello&rdquo;: Vertex{
1,2
},
&ldquo;world&rdquo;:Vertex{
3,4
},
}</li>
<li>m := make(map[string]int)
m[&ldquo;hello&rdquo;]=42
delete(m, &ldquo;hello&rdquo;)
v, ok := m[&ldquo;hello&rdquo;]判断有没有返回值。如果map中读取某个不存在的键时，结果是map元素类型的零值。</li>
<li>go语言中没有类的概念，但是可以在结构体类型上定义方法。比如
type MyFloat float64
func (f MyFloat) Abs() float64{
if f&lt;0 {
return float(-f)
}
return float64(f)
}
然后在后面就可以通过f.Abs()来调用。</li>
<li>在结构体类型上定义方法的时候，注意，尽量用指针来做，用指针可以用来修改结构体变量的值，而不用指针的话，修改的只是一个拷贝，所以不会修改原来的值，是没有意义的。</li>
<li>go新开启一个线程。</li>
<li>channel是有类型的管道，默认情况下，在另一端没有准备好之前，接受都会阻塞，使得goroutine在没有明确的锁或者静态变量的情况下进行同步。不过channel和map和slice一样，都需要用make来创建一下才可以使用。c := make(chan int)后面的int代表之后要送进去的值。c &lt;- sum     x,y := &lt;-c,&lt;-c分别是加入一个值和推出一个值。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[deis源码解读-go语言学习1]]></title>
    <link href="http://monkey-h.github.io/blog/deis-1/"/>
    <updated>2015-09-07T10:25:54+08:00</updated>
    <id>http://monkey-h.github.io/blog/deis-1</id>
    <content type="html"><![CDATA[<h4>写在前面</h4>

<p>又开始看代码了，NAP的编程进入了细节化阶段，不能再闭门造车了，看看deis的代码，看看别人是怎么做的。首先，要学习一下go语言是怎么用的。</p>

<!--more-->


<h4>go语言 函数变量循环判断语句</h4>

<ul>
<li>go语言和一般的java程序一样，都需要一个main函数，作为程序的入口。func main(){}</li>
<li><p>go语言也是可以引入别的现成的程序库和写好的程序。打包的方式：
  import (
  &ldquo;fmt&rdquo;
  &ldquo;math&rdquo;
)
或者
import &ldquo;fmt&rdquo;
import &ldquo;math&rdquo;</p></li>
<li><p>导入包之后，可以通过包加名称导出。在go语言中，导出的函数或者变量必须是大写的字母开头。比如在上面中，打印math中的pi。fmt.Println(math.pi)是不行的。当然，这是因为系统封装的math中没有pi，但是，就算是自己写的类，其中定义了pi，也是不能调用的，必须把pi改成Pi，大写字母开头才可以。</p></li>
<li>定义函数。func add(x int, y int) int { return x+y } 学到的东西，没有分号，定义函数通过func 函数名 然后参数可以多个，也可以没有，先写变量，然后类型，逗号，继续。返回值类型在最后。</li>
<li>当函数的参数同一个类型时，除了最后一个，都可以省略。func add(x, y int) int {}</li>
<li><p>func swap(x, y string) (string, string) {
  return y, x
  }
  func main() {
  a,b := swap(&ldquo;hello&rdquo;, &ldquo;world&rdquo;)
  fmt.Println(a, b)
  }
  从这里可以学到，多个返回值，用（）阔起来。=:后面在介绍。有多个返回值的时候，a,b即可。</p></li>
<li><p>函数返回值可以直接被命名。
  func split(sum int) (x, y int){
  x = sum /2
  y = sum *2
  }
  func main(){
  fmt.Println(split(18))
  }</p></li>
<li><p>var语句可以定义变量列表，同样的，类型定义在后面。
  var c, java bool
  int i
  注意，初始化，bool类型是false，int类型是0</p></li>
<li>var语句定义的变量也可以初始化，var i,j int = 1,2</li>
<li>:=用在一些变量类型明确的地方，可以用来替代var。比如，函数的返回值，已经生命了类型。或者变量声明的时候，初始化了true，string类型，这就很明显了。</li>
<li>基本类型：bool，string，int，int8，int16，int32，int64，uint，uint8，uint16，uint32，uint64，uintptr，byte（uint8的别称），rune（int32的别名），float32，float64，complex64，complex128</li>
<li><p>func main(){
  const f = &ldquo;%T(%v)\n&rdquo;
  fmt.Printf(f, x, x)
}
猜测这个的意思是打印x的变量类型（x的值）回车。</p></li>
<li><p>零值，对于int类型是0，对于string类型是空字符串，对于布尔类型，是false。</p></li>
<li>fmt.Printf(&ldquo;%q \n&rdquo;, s) fmt.Printf(&ldquo;%v \n&rdquo;, s)发现，如果s是string类型的，那么q输出有”“双引号，v没有。</li>
<li>go语言不通类型之间的类型转换，需要显示转换。var f float64 = float(s)</li>
<li>常量定义。const PI = 3.14不能用:=来定义。</li>
<li>定义常量也可以像import一样打包。const(big=1 small=2)</li>
<li>go只有一种循环，for循环，除了没有for后面的（），和java，c++的for循环是一样的,但是{}必须。</li>
<li>虽然go语言只有一种循环，但是for循环可以没有前置语句和后置语句，当没有这两个的时候，又可以省略分好，所以，这个时候的go语言的for语句，实际就是java中的while语句。</li>
<li>接上条，如果再省略判断语句，就是死循环了。类似于这种for{}这种。</li>
<li>同样的，if语句也是，没有（），其余的和java一样，但{}必须。但是不同的是，if语句可以在判断语句之前，加一个简单的语句，用分号隔开，比如：if var i int = 2; v&lt;2 {}.</li>
<li>switch语句也是这样，可以在前面加一个简单的语句，然后用分号隔开。不需要break语句，除非分支用fallthrough结束，否则分支会自动停止。</li>
<li>switch语句没有选择项的时候，就是相当于switch true，这样的话，可以在case语句里面加上判断，比如case x > 2: 这样也是可以的，相当于if else语句。</li>
<li>defer 语句会延迟函数的执行直到上层函数返回。</li>
<li>延迟的defer函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。</li>
</ul>

]]></content>
  </entry>
  
</feed>
